#!/usr/bin/env bash
# Runs specific tasks.
# Assumes bin/setup has been run.

# Fail on invalid variable references
set -u

print_help() {
  cat <<HELP
Runs specific tasks.
Usage: $0 <mode> <task> [<args...>]
  $0 local <task>:   runs tasks entirely on current machine
  $0 remote <task>:  queues tasks to execute on deployed infra via RabbitMQ
  $0 help:           prints this help (default)
HELP
}

cmd="${1:-help}"

if [[ "$cmd" == "help" || "$cmd" == "--help" || "$cmd" == "-h" ]]; then
  print_help
  exit 0
elif [[ "$cmd" == "local" ]]; then
  celery_local="true"
elif [[ "$cmd" == "remote" ]]; then
  celery_local="false"
else
  echo "Unrecognized task runner subcommand: <$cmd>."
  print_help
  exit 1
fi

task="${2}"

celery_task_module=${task%.*}
celery_task_name=${task##*.}

declare -a args
args=("${@:3}")

# Ensure failures propegate
set -e

# Echo commands
set -x

# Inexplicably, `celery call` ignores always-eager settings, so we implement task calling ourselves
CELERY_TASK_ALWAYS_EAGER="$celery_local" python scripts/task/runner.py \
  "$celery_task_module" \
  "$celery_task_name" \
  "${args[@]}"
